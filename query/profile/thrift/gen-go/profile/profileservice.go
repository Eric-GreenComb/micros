// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package profile

import (
	"bytes"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

type ProfileService interface {
	Ping() (r string, err error)
	// Parameters:
	//  - ProfileID
	GetProfile(profileID string) (r string, err error)
	// Parameters:
	//  - UserID
	GetProfilesByUserID(userID string) (r string, err error)
	// Parameters:
	//  - CategoryID
	//  - Timestamp
	//  - Pagesize
	GetProfilesByCategory(categoryID int64, timestamp int64, pagesize int64) (r string, err error)
	// Parameters:
	//  - SubcategoryID
	//  - Timestamp
	//  - Pagesize
	GetProfilesBySubCategory(subcategoryID int64, timestamp int64, pagesize int64) (r string, err error)
	// Parameters:
	//  - OptionMap
	//  - KeyMap
	//  - Timestamp
	//  - Pagesize
	SearchProfiles(optionMap map[string]int64, keyMap map[string]string, timestamp int64, pagesize int64) (r string, err error)
}

type ProfileServiceClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewProfileServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ProfileServiceClient {
	return &ProfileServiceClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewProfileServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ProfileServiceClient {
	return &ProfileServiceClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

func (p *ProfileServiceClient) Ping() (r string, err error) {
	if err = p.sendPing(); err != nil {
		return
	}
	return p.recvPing()
}

func (p *ProfileServiceClient) sendPing() (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("Ping", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProfileServicePingArgs{}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ProfileServiceClient) recvPing() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "Ping" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "Ping failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "Ping failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error0 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error1 error
		error1, err = error0.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error1
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "Ping failed: invalid message type")
		return
	}
	result := ProfileServicePingResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - ProfileID
func (p *ProfileServiceClient) GetProfile(profileID string) (r string, err error) {
	if err = p.sendGetProfile(profileID); err != nil {
		return
	}
	return p.recvGetProfile()
}

func (p *ProfileServiceClient) sendGetProfile(profileID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProfile", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProfileServiceGetProfileArgs{
		ProfileID: profileID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ProfileServiceClient) recvGetProfile() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetProfile" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetProfile failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProfile failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error2 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error3 error
		error3, err = error2.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error3
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetProfile failed: invalid message type")
		return
	}
	result := ProfileServiceGetProfileResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - UserID
func (p *ProfileServiceClient) GetProfilesByUserID(userID string) (r string, err error) {
	if err = p.sendGetProfilesByUserID(userID); err != nil {
		return
	}
	return p.recvGetProfilesByUserID()
}

func (p *ProfileServiceClient) sendGetProfilesByUserID(userID string) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProfilesByUserID", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProfileServiceGetProfilesByUserIDArgs{
		UserID: userID,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ProfileServiceClient) recvGetProfilesByUserID() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetProfilesByUserID" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetProfilesByUserID failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProfilesByUserID failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error4 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error5 error
		error5, err = error4.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error5
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetProfilesByUserID failed: invalid message type")
		return
	}
	result := ProfileServiceGetProfilesByUserIDResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - CategoryID
//  - Timestamp
//  - Pagesize
func (p *ProfileServiceClient) GetProfilesByCategory(categoryID int64, timestamp int64, pagesize int64) (r string, err error) {
	if err = p.sendGetProfilesByCategory(categoryID, timestamp, pagesize); err != nil {
		return
	}
	return p.recvGetProfilesByCategory()
}

func (p *ProfileServiceClient) sendGetProfilesByCategory(categoryID int64, timestamp int64, pagesize int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProfilesByCategory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProfileServiceGetProfilesByCategoryArgs{
		CategoryID: categoryID,
		Timestamp:  timestamp,
		Pagesize:   pagesize,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ProfileServiceClient) recvGetProfilesByCategory() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetProfilesByCategory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetProfilesByCategory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProfilesByCategory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error6 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error7 error
		error7, err = error6.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error7
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetProfilesByCategory failed: invalid message type")
		return
	}
	result := ProfileServiceGetProfilesByCategoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - SubcategoryID
//  - Timestamp
//  - Pagesize
func (p *ProfileServiceClient) GetProfilesBySubCategory(subcategoryID int64, timestamp int64, pagesize int64) (r string, err error) {
	if err = p.sendGetProfilesBySubCategory(subcategoryID, timestamp, pagesize); err != nil {
		return
	}
	return p.recvGetProfilesBySubCategory()
}

func (p *ProfileServiceClient) sendGetProfilesBySubCategory(subcategoryID int64, timestamp int64, pagesize int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("GetProfilesBySubCategory", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProfileServiceGetProfilesBySubCategoryArgs{
		SubcategoryID: subcategoryID,
		Timestamp:     timestamp,
		Pagesize:      pagesize,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ProfileServiceClient) recvGetProfilesBySubCategory() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "GetProfilesBySubCategory" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "GetProfilesBySubCategory failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "GetProfilesBySubCategory failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error8 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error9 error
		error9, err = error8.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error9
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "GetProfilesBySubCategory failed: invalid message type")
		return
	}
	result := ProfileServiceGetProfilesBySubCategoryResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

// Parameters:
//  - OptionMap
//  - KeyMap
//  - Timestamp
//  - Pagesize
func (p *ProfileServiceClient) SearchProfiles(optionMap map[string]int64, keyMap map[string]string, timestamp int64, pagesize int64) (r string, err error) {
	if err = p.sendSearchProfiles(optionMap, keyMap, timestamp, pagesize); err != nil {
		return
	}
	return p.recvSearchProfiles()
}

func (p *ProfileServiceClient) sendSearchProfiles(optionMap map[string]int64, keyMap map[string]string, timestamp int64, pagesize int64) (err error) {
	oprot := p.OutputProtocol
	if oprot == nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	if err = oprot.WriteMessageBegin("SearchProfiles", thrift.CALL, p.SeqId); err != nil {
		return
	}
	args := ProfileServiceSearchProfilesArgs{
		OptionMap: optionMap,
		KeyMap:    keyMap,
		Timestamp: timestamp,
		Pagesize:  pagesize,
	}
	if err = args.Write(oprot); err != nil {
		return
	}
	if err = oprot.WriteMessageEnd(); err != nil {
		return
	}
	return oprot.Flush()
}

func (p *ProfileServiceClient) recvSearchProfiles() (value string, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	method, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if method != "SearchProfiles" {
		err = thrift.NewTApplicationException(thrift.WRONG_METHOD_NAME, "SearchProfiles failed: wrong method name")
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "SearchProfiles failed: out of sequence response")
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error10 := thrift.NewTApplicationException(thrift.UNKNOWN_APPLICATION_EXCEPTION, "Unknown Exception")
		var error11 error
		error11, err = error10.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error11
		return
	}
	if mTypeId != thrift.REPLY {
		err = thrift.NewTApplicationException(thrift.INVALID_MESSAGE_TYPE_EXCEPTION, "SearchProfiles failed: invalid message type")
		return
	}
	result := ProfileServiceSearchProfilesResult{}
	if err = result.Read(iprot); err != nil {
		return
	}
	if err = iprot.ReadMessageEnd(); err != nil {
		return
	}
	value = result.GetSuccess()
	return
}

type ProfileServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ProfileService
}

func (p *ProfileServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ProfileServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ProfileServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewProfileServiceProcessor(handler ProfileService) *ProfileServiceProcessor {

	self12 := &ProfileServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self12.processorMap["Ping"] = &profileServiceProcessorPing{handler: handler}
	self12.processorMap["GetProfile"] = &profileServiceProcessorGetProfile{handler: handler}
	self12.processorMap["GetProfilesByUserID"] = &profileServiceProcessorGetProfilesByUserID{handler: handler}
	self12.processorMap["GetProfilesByCategory"] = &profileServiceProcessorGetProfilesByCategory{handler: handler}
	self12.processorMap["GetProfilesBySubCategory"] = &profileServiceProcessorGetProfilesBySubCategory{handler: handler}
	self12.processorMap["SearchProfiles"] = &profileServiceProcessorSearchProfiles{handler: handler}
	return self12
}

func (p *ProfileServiceProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x13 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x13.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush()
	return false, x13

}

type profileServiceProcessorPing struct {
	handler ProfileService
}

func (p *profileServiceProcessorPing) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProfileServicePingResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.Ping(); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: "+err2.Error())
		oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorGetProfile struct {
	handler ProfileService
}

func (p *profileServiceProcessorGetProfile) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceGetProfileArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProfileServiceGetProfileResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetProfile(args.ProfileID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfile: "+err2.Error())
		oprot.WriteMessageBegin("GetProfile", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfile", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorGetProfilesByUserID struct {
	handler ProfileService
}

func (p *profileServiceProcessorGetProfilesByUserID) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceGetProfilesByUserIDArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfilesByUserID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProfileServiceGetProfilesByUserIDResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetProfilesByUserID(args.UserID); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfilesByUserID: "+err2.Error())
		oprot.WriteMessageBegin("GetProfilesByUserID", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfilesByUserID", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorGetProfilesByCategory struct {
	handler ProfileService
}

func (p *profileServiceProcessorGetProfilesByCategory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceGetProfilesByCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfilesByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProfileServiceGetProfilesByCategoryResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetProfilesByCategory(args.CategoryID, args.Timestamp, args.Pagesize); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfilesByCategory: "+err2.Error())
		oprot.WriteMessageBegin("GetProfilesByCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfilesByCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorGetProfilesBySubCategory struct {
	handler ProfileService
}

func (p *profileServiceProcessorGetProfilesBySubCategory) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceGetProfilesBySubCategoryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("GetProfilesBySubCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProfileServiceGetProfilesBySubCategoryResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.GetProfilesBySubCategory(args.SubcategoryID, args.Timestamp, args.Pagesize); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing GetProfilesBySubCategory: "+err2.Error())
		oprot.WriteMessageBegin("GetProfilesBySubCategory", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("GetProfilesBySubCategory", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type profileServiceProcessorSearchProfiles struct {
	handler ProfileService
}

func (p *profileServiceProcessorSearchProfiles) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ProfileServiceSearchProfilesArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("SearchProfiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return false, err
	}

	iprot.ReadMessageEnd()
	result := ProfileServiceSearchProfilesResult{}
	var retval string
	var err2 error
	if retval, err2 = p.handler.SearchProfiles(args.OptionMap, args.KeyMap, args.Timestamp, args.Pagesize); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing SearchProfiles: "+err2.Error())
		oprot.WriteMessageBegin("SearchProfiles", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush()
		return true, err2
	} else {
		result.Success = &retval
	}
	if err2 = oprot.WriteMessageBegin("SearchProfiles", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

type ProfileServicePingArgs struct {
}

func NewProfileServicePingArgs() *ProfileServicePingArgs {
	return &ProfileServicePingArgs{}
}

func (p *ProfileServicePingArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err := iprot.Skip(fieldTypeId); err != nil {
			return err
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServicePingArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ping_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServicePingArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ProfileServicePingResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewProfileServicePingResult() *ProfileServicePingResult {
	return &ProfileServicePingResult{}
}

var ProfileServicePingResult_Success_DEFAULT string

func (p *ProfileServicePingResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ProfileServicePingResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ProfileServicePingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServicePingResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServicePingResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ProfileServicePingResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ping_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServicePingResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ProfileServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServicePingResult(%+v)", *p)
}

// Attributes:
//  - ProfileID
type ProfileServiceGetProfileArgs struct {
	ProfileID string `thrift:"profileID,1" json:"profileID"`
}

func NewProfileServiceGetProfileArgs() *ProfileServiceGetProfileArgs {
	return &ProfileServiceGetProfileArgs{}
}

func (p *ProfileServiceGetProfileArgs) GetProfileID() string {
	return p.ProfileID
}
func (p *ProfileServiceGetProfileArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfileArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ProfileID = v
	}
	return nil
}

func (p *ProfileServiceGetProfileArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfile_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfileArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("profileID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:profileID: ", p), err)
	}
	if err := oprot.WriteString(string(p.ProfileID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.profileID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:profileID: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfileArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfileArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ProfileServiceGetProfileResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewProfileServiceGetProfileResult() *ProfileServiceGetProfileResult {
	return &ProfileServiceGetProfileResult{}
}

var ProfileServiceGetProfileResult_Success_DEFAULT string

func (p *ProfileServiceGetProfileResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ProfileServiceGetProfileResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ProfileServiceGetProfileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceGetProfileResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfileResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ProfileServiceGetProfileResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfile_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfileResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ProfileServiceGetProfileResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfileResult(%+v)", *p)
}

// Attributes:
//  - UserID
type ProfileServiceGetProfilesByUserIDArgs struct {
	UserID string `thrift:"userID,1" json:"userID"`
}

func NewProfileServiceGetProfilesByUserIDArgs() *ProfileServiceGetProfilesByUserIDArgs {
	return &ProfileServiceGetProfilesByUserIDArgs{}
}

func (p *ProfileServiceGetProfilesByUserIDArgs) GetUserID() string {
	return p.UserID
}
func (p *ProfileServiceGetProfilesByUserIDArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByUserIDArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.UserID = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesByUserIDArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfilesByUserID_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByUserIDArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("userID", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userID: ", p), err)
	}
	if err := oprot.WriteString(string(p.UserID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.userID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userID: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesByUserIDArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilesByUserIDArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ProfileServiceGetProfilesByUserIDResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewProfileServiceGetProfilesByUserIDResult() *ProfileServiceGetProfilesByUserIDResult {
	return &ProfileServiceGetProfilesByUserIDResult{}
}

var ProfileServiceGetProfilesByUserIDResult_Success_DEFAULT string

func (p *ProfileServiceGetProfilesByUserIDResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ProfileServiceGetProfilesByUserIDResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ProfileServiceGetProfilesByUserIDResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceGetProfilesByUserIDResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByUserIDResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ProfileServiceGetProfilesByUserIDResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfilesByUserID_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByUserIDResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ProfileServiceGetProfilesByUserIDResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilesByUserIDResult(%+v)", *p)
}

// Attributes:
//  - CategoryID
//  - Timestamp
//  - Pagesize
type ProfileServiceGetProfilesByCategoryArgs struct {
	CategoryID int64 `thrift:"categoryID,1" json:"categoryID"`
	Timestamp  int64 `thrift:"timestamp,2" json:"timestamp"`
	Pagesize   int64 `thrift:"pagesize,3" json:"pagesize"`
}

func NewProfileServiceGetProfilesByCategoryArgs() *ProfileServiceGetProfilesByCategoryArgs {
	return &ProfileServiceGetProfilesByCategoryArgs{}
}

func (p *ProfileServiceGetProfilesByCategoryArgs) GetCategoryID() int64 {
	return p.CategoryID
}

func (p *ProfileServiceGetProfilesByCategoryArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *ProfileServiceGetProfilesByCategoryArgs) GetPagesize() int64 {
	return p.Pagesize
}
func (p *ProfileServiceGetProfilesByCategoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.CategoryID = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pagesize = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfilesByCategory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("categoryID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:categoryID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.CategoryID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.categoryID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:categoryID: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesByCategoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesByCategoryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pagesize", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pagesize: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Pagesize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pagesize (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pagesize: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesByCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilesByCategoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ProfileServiceGetProfilesByCategoryResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewProfileServiceGetProfilesByCategoryResult() *ProfileServiceGetProfilesByCategoryResult {
	return &ProfileServiceGetProfilesByCategoryResult{}
}

var ProfileServiceGetProfilesByCategoryResult_Success_DEFAULT string

func (p *ProfileServiceGetProfilesByCategoryResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ProfileServiceGetProfilesByCategoryResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ProfileServiceGetProfilesByCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceGetProfilesByCategoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfilesByCategory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesByCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ProfileServiceGetProfilesByCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilesByCategoryResult(%+v)", *p)
}

// Attributes:
//  - SubcategoryID
//  - Timestamp
//  - Pagesize
type ProfileServiceGetProfilesBySubCategoryArgs struct {
	SubcategoryID int64 `thrift:"subcategoryID,1" json:"subcategoryID"`
	Timestamp     int64 `thrift:"timestamp,2" json:"timestamp"`
	Pagesize      int64 `thrift:"pagesize,3" json:"pagesize"`
}

func NewProfileServiceGetProfilesBySubCategoryArgs() *ProfileServiceGetProfilesBySubCategoryArgs {
	return &ProfileServiceGetProfilesBySubCategoryArgs{}
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) GetSubcategoryID() int64 {
	return p.SubcategoryID
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) GetPagesize() int64 {
	return p.Pagesize
}
func (p *ProfileServiceGetProfilesBySubCategoryArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.SubcategoryID = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Pagesize = v
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfilesBySubCategory_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("subcategoryID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:subcategoryID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.SubcategoryID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.subcategoryID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:subcategoryID: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:timestamp: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pagesize", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pagesize: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Pagesize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pagesize (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pagesize: ", p), err)
	}
	return err
}

func (p *ProfileServiceGetProfilesBySubCategoryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilesBySubCategoryArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ProfileServiceGetProfilesBySubCategoryResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewProfileServiceGetProfilesBySubCategoryResult() *ProfileServiceGetProfilesBySubCategoryResult {
	return &ProfileServiceGetProfilesBySubCategoryResult{}
}

var ProfileServiceGetProfilesBySubCategoryResult_Success_DEFAULT string

func (p *ProfileServiceGetProfilesBySubCategoryResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ProfileServiceGetProfilesBySubCategoryResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ProfileServiceGetProfilesBySubCategoryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceGetProfilesBySubCategoryResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetProfilesBySubCategory_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceGetProfilesBySubCategoryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ProfileServiceGetProfilesBySubCategoryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceGetProfilesBySubCategoryResult(%+v)", *p)
}

// Attributes:
//  - OptionMap
//  - KeyMap
//  - Timestamp
//  - Pagesize
type ProfileServiceSearchProfilesArgs struct {
	OptionMap map[string]int64  `thrift:"optionMap,1" json:"optionMap"`
	KeyMap    map[string]string `thrift:"keyMap,2" json:"keyMap"`
	Timestamp int64             `thrift:"timestamp,3" json:"timestamp"`
	Pagesize  int64             `thrift:"pagesize,4" json:"pagesize"`
}

func NewProfileServiceSearchProfilesArgs() *ProfileServiceSearchProfilesArgs {
	return &ProfileServiceSearchProfilesArgs{}
}

func (p *ProfileServiceSearchProfilesArgs) GetOptionMap() map[string]int64 {
	return p.OptionMap
}

func (p *ProfileServiceSearchProfilesArgs) GetKeyMap() map[string]string {
	return p.KeyMap
}

func (p *ProfileServiceSearchProfilesArgs) GetTimestamp() int64 {
	return p.Timestamp
}

func (p *ProfileServiceSearchProfilesArgs) GetPagesize() int64 {
	return p.Pagesize
}
func (p *ProfileServiceSearchProfilesArgs) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceSearchProfilesArgs) readField1(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]int64, size)
	p.OptionMap = tMap
	for i := 0; i < size; i++ {
		var _key14 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key14 = v
		}
		var _val15 int64
		if v, err := iprot.ReadI64(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val15 = v
		}
		p.OptionMap[_key14] = _val15
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ProfileServiceSearchProfilesArgs) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.PrependError("error reading map begin: ", err)
	}
	tMap := make(map[string]string, size)
	p.KeyMap = tMap
	for i := 0; i < size; i++ {
		var _key16 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_key16 = v
		}
		var _val17 string
		if v, err := iprot.ReadString(); err != nil {
			return thrift.PrependError("error reading field 0: ", err)
		} else {
			_val17 = v
		}
		p.KeyMap[_key16] = _val17
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return thrift.PrependError("error reading map end: ", err)
	}
	return nil
}

func (p *ProfileServiceSearchProfilesArgs) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *ProfileServiceSearchProfilesArgs) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Pagesize = v
	}
	return nil
}

func (p *ProfileServiceSearchProfilesArgs) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchProfiles_args"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceSearchProfilesArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("optionMap", thrift.MAP, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:optionMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.I64, len(p.OptionMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.OptionMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteI64(int64(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:optionMap: ", p), err)
	}
	return err
}

func (p *ProfileServiceSearchProfilesArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("keyMap", thrift.MAP, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:keyMap: ", p), err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.KeyMap)); err != nil {
		return thrift.PrependError("error writing map begin: ", err)
	}
	for k, v := range p.KeyMap {
		if err := oprot.WriteString(string(k)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return thrift.PrependError("error writing map end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:keyMap: ", p), err)
	}
	return err
}

func (p *ProfileServiceSearchProfilesArgs) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err)
	}
	return err
}

func (p *ProfileServiceSearchProfilesArgs) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("pagesize", thrift.I64, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:pagesize: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.Pagesize)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.pagesize (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:pagesize: ", p), err)
	}
	return err
}

func (p *ProfileServiceSearchProfilesArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceSearchProfilesArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ProfileServiceSearchProfilesResult struct {
	Success *string `thrift:"success,0" json:"success,omitempty"`
}

func NewProfileServiceSearchProfilesResult() *ProfileServiceSearchProfilesResult {
	return &ProfileServiceSearchProfilesResult{}
}

var ProfileServiceSearchProfilesResult_Success_DEFAULT string

func (p *ProfileServiceSearchProfilesResult) GetSuccess() string {
	if !p.IsSetSuccess() {
		return ProfileServiceSearchProfilesResult_Success_DEFAULT
	}
	return *p.Success
}
func (p *ProfileServiceSearchProfilesResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ProfileServiceSearchProfilesResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0:
			if err := p.readField0(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *ProfileServiceSearchProfilesResult) readField0(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 0: ", err)
	} else {
		p.Success = &v
	}
	return nil
}

func (p *ProfileServiceSearchProfilesResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("SearchProfiles_result"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField0(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *ProfileServiceSearchProfilesResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err := oprot.WriteFieldBegin("success", thrift.STRING, 0); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Success)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.success (0) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err)
		}
	}
	return err
}

func (p *ProfileServiceSearchProfilesResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ProfileServiceSearchProfilesResult(%+v)", *p)
}
