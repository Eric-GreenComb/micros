// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"flag"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/banerwai/micros/command/resume/thrift/gen-go/resume"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  string Ping()")
	fmt.Fprintln(os.Stderr, "  string AddResume(string resume)")
	fmt.Fprintln(os.Stderr, "  string UpdateResume(string userid, string resume)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumeBase(string userid,  mmap)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumeSkillExperience(string userid, string experience_levels)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumeToolandArchs(string userid, string tool_archs)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumePortfolioes(string userid, string portfolioes)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumeEmploymentHistories(string userid, string employment_histories)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumeEducations(string userid, string educations)")
	fmt.Fprintln(os.Stderr, "  string UpdateResumeOtherExperiences(string userid, string other_experiences)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = strconv.Atoi
	_ = math.Abs
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := resume.NewResumeServiceClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "Ping":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "Ping requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.Ping())
		fmt.Print("\n")
		break
	case "AddResume":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "AddResume requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		fmt.Print(client.AddResume(value0))
		fmt.Print("\n")
		break
	case "UpdateResume":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResume requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResume(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumeBase":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumeBase requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		arg28 := flag.Arg(2)
		mbTrans29 := thrift.NewTMemoryBufferLen(len(arg28))
		defer mbTrans29.Close()
		_, err30 := mbTrans29.WriteString(arg28)
		if err30 != nil {
			Usage()
			return
		}
		factory31 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt32 := factory31.GetProtocol(mbTrans29)
		containerStruct1 := resume.NewResumeServiceUpdateResumeBaseArgs()
		err33 := containerStruct1.ReadField2(jsProt32)
		if err33 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Mmap
		value1 := argvalue1
		fmt.Print(client.UpdateResumeBase(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumeSkillExperience":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumeSkillExperience requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResumeSkillExperience(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumeToolandArchs":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumeToolandArchs requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResumeToolandArchs(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumePortfolioes":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumePortfolioes requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResumePortfolioes(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumeEmploymentHistories":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumeEmploymentHistories requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResumeEmploymentHistories(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumeEducations":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumeEducations requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResumeEducations(value0, value1))
		fmt.Print("\n")
		break
	case "UpdateResumeOtherExperiences":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "UpdateResumeOtherExperiences requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := argvalue0
		argvalue1 := flag.Arg(2)
		value1 := argvalue1
		fmt.Print(client.UpdateResumeOtherExperiences(value0, value1))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
